//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OIS.RPT.DTO
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.EntityClient;
    using System.Data.SqlClient;
    using OIS.Common;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OIS_RPTEntities : DbContext
    {
        public static string connectionString
    	{
    		get
    		{
    			SqlConnectionStringBuilder sqlBuilder = new SqlConnectionStringBuilder
    			{
    				MultipleActiveResultSets = true,
    				DataSource =  OISDataInfo.DatabaseInfomation.DATASOURCE,
    				InitialCatalog = OISDataInfo.DatabaseInfomation.DATABASENAME,
    				UserID = OISDataInfo.DatabaseInfomation.USERNAME,
    				Password = OISDataInfo.DatabaseInfomation.PASSWORD,
    			};
    
    			EntityConnectionStringBuilder entityString = new EntityConnectionStringBuilder
                {
                    Provider = "System.Data.SqlClient",
                    Metadata = string.Format("res://*/{0}.csdl|res://*/{0}.ssdl|res://*/{0}.msl", "OIS_RPTModel"),
                    ProviderConnectionString = sqlBuilder.ConnectionString,
                };
                return entityString.ConnectionString;
    		}
    	}
        public OIS_RPTEntities()
            //: base("name=OIS_RPTEntities")
    		: base(connectionString)
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<TBR_WORK_PLACE_LIGHT_INSTRUMENT> TBR_WORK_PLACE_LIGHT_INSTRUMENT { get; set; }
        public virtual DbSet<TBR_WORK_PLACE_LIGHT_USER> TBR_WORK_PLACE_LIGHT_USER { get; set; }
        public virtual DbSet<TBR_WORK_PLACE_AIR_USER> TBR_WORK_PLACE_AIR_USER { get; set; }
    
        public virtual ObjectResult<sp_RPT001_GetWorkPlaceLight_Result> sp_RPT001_GetWorkPlaceLight(Nullable<int> p_ID, string p_REPORT_NUMBER, Nullable<int> p_CUSTOMER_ID, Nullable<System.DateTime> p_MEASURED_DATE_FROM, Nullable<System.DateTime> p_MEASURED_DATE_TO, string p_MEASURED_BY, Nullable<int> p_INSTRUMENT_ID, string p_CRT_USER_ID, Nullable<bool> p_SHOWDELETERECORD)
        {
            var p_IDParameter = p_ID.HasValue ?
                new ObjectParameter("p_ID", p_ID) :
                new ObjectParameter("p_ID", typeof(int));
    
            var p_REPORT_NUMBERParameter = p_REPORT_NUMBER != null ?
                new ObjectParameter("p_REPORT_NUMBER", p_REPORT_NUMBER) :
                new ObjectParameter("p_REPORT_NUMBER", typeof(string));
    
            var p_CUSTOMER_IDParameter = p_CUSTOMER_ID.HasValue ?
                new ObjectParameter("p_CUSTOMER_ID", p_CUSTOMER_ID) :
                new ObjectParameter("p_CUSTOMER_ID", typeof(int));
    
            var p_MEASURED_DATE_FROMParameter = p_MEASURED_DATE_FROM.HasValue ?
                new ObjectParameter("p_MEASURED_DATE_FROM", p_MEASURED_DATE_FROM) :
                new ObjectParameter("p_MEASURED_DATE_FROM", typeof(System.DateTime));
    
            var p_MEASURED_DATE_TOParameter = p_MEASURED_DATE_TO.HasValue ?
                new ObjectParameter("p_MEASURED_DATE_TO", p_MEASURED_DATE_TO) :
                new ObjectParameter("p_MEASURED_DATE_TO", typeof(System.DateTime));
    
            var p_MEASURED_BYParameter = p_MEASURED_BY != null ?
                new ObjectParameter("p_MEASURED_BY", p_MEASURED_BY) :
                new ObjectParameter("p_MEASURED_BY", typeof(string));
    
            var p_INSTRUMENT_IDParameter = p_INSTRUMENT_ID.HasValue ?
                new ObjectParameter("p_INSTRUMENT_ID", p_INSTRUMENT_ID) :
                new ObjectParameter("p_INSTRUMENT_ID", typeof(int));
    
            var p_CRT_USER_IDParameter = p_CRT_USER_ID != null ?
                new ObjectParameter("p_CRT_USER_ID", p_CRT_USER_ID) :
                new ObjectParameter("p_CRT_USER_ID", typeof(string));
    
            var p_SHOWDELETERECORDParameter = p_SHOWDELETERECORD.HasValue ?
                new ObjectParameter("p_SHOWDELETERECORD", p_SHOWDELETERECORD) :
                new ObjectParameter("p_SHOWDELETERECORD", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RPT001_GetWorkPlaceLight_Result>("sp_RPT001_GetWorkPlaceLight", p_IDParameter, p_REPORT_NUMBERParameter, p_CUSTOMER_IDParameter, p_MEASURED_DATE_FROMParameter, p_MEASURED_DATE_TOParameter, p_MEASURED_BYParameter, p_INSTRUMENT_IDParameter, p_CRT_USER_IDParameter, p_SHOWDELETERECORDParameter);
        }
    
        public virtual ObjectResult<sp_RPT001_GetWorkPlaceLightDt_Result> sp_RPT001_GetWorkPlaceLightDt(Nullable<int> p_WPL_ID)
        {
            var p_WPL_IDParameter = p_WPL_ID.HasValue ?
                new ObjectParameter("p_WPL_ID", p_WPL_ID) :
                new ObjectParameter("p_WPL_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RPT001_GetWorkPlaceLightDt_Result>("sp_RPT001_GetWorkPlaceLightDt", p_WPL_IDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_RPT001_SaveWorkPlaceLight(Nullable<int> p_ID, string p_REPORT_CODE, Nullable<int> p_CUSTOMER_ID, string p_CUSTOMER_LANG, string p_CUSTOMER_NAME, string p_CUSTOMER_ADDR, Nullable<int> p_CUSTOMER_PROJECT_ID, string p_CUSTOMER_PROJECT_LANG, string p_CUSTOMER_PROJECT_NAME, string p_CUSTOMER_PROJECT_ADDR, Nullable<System.DateTime> p_MEASURED_DATE, Nullable<System.DateTime> p_MEASURED_DATE_TO, Nullable<System.TimeSpan> p_MEASURED_TIME_FROM, Nullable<System.TimeSpan> p_MEASURED_TIME_TO, Nullable<System.DateTime> p_MEASURED_DATE_NIGHT, Nullable<System.DateTime> p_MEASURED_DATE_NIGHT_TO, Nullable<System.TimeSpan> p_MEASURED_TIME_FROM_NIGHT, Nullable<System.TimeSpan> p_MEASURED_TIME_TO_NIGHT, string p_MEASURED_BY, Nullable<int> p_MEASURED_INSTRUMENT_ID, string p_REGISTRATION_ID, string p_LAB_SUPERVISOR_ID, Nullable<bool> p_SHOW_LV3_EACH_PAGE, Nullable<bool> p_SHOW_LV3_CONT, Nullable<bool> p_SHOW_LV2_CONT, Nullable<bool> p_SHOW_PROJECT_ADDR, string p_USERID, Nullable<bool> p_IS_CANCEL)
        {
            var p_IDParameter = p_ID.HasValue ?
                new ObjectParameter("p_ID", p_ID) :
                new ObjectParameter("p_ID", typeof(int));
    
            var p_REPORT_CODEParameter = p_REPORT_CODE != null ?
                new ObjectParameter("p_REPORT_CODE", p_REPORT_CODE) :
                new ObjectParameter("p_REPORT_CODE", typeof(string));
    
            var p_CUSTOMER_IDParameter = p_CUSTOMER_ID.HasValue ?
                new ObjectParameter("p_CUSTOMER_ID", p_CUSTOMER_ID) :
                new ObjectParameter("p_CUSTOMER_ID", typeof(int));
    
            var p_CUSTOMER_LANGParameter = p_CUSTOMER_LANG != null ?
                new ObjectParameter("p_CUSTOMER_LANG", p_CUSTOMER_LANG) :
                new ObjectParameter("p_CUSTOMER_LANG", typeof(string));
    
            var p_CUSTOMER_NAMEParameter = p_CUSTOMER_NAME != null ?
                new ObjectParameter("p_CUSTOMER_NAME", p_CUSTOMER_NAME) :
                new ObjectParameter("p_CUSTOMER_NAME", typeof(string));
    
            var p_CUSTOMER_ADDRParameter = p_CUSTOMER_ADDR != null ?
                new ObjectParameter("p_CUSTOMER_ADDR", p_CUSTOMER_ADDR) :
                new ObjectParameter("p_CUSTOMER_ADDR", typeof(string));
    
            var p_CUSTOMER_PROJECT_IDParameter = p_CUSTOMER_PROJECT_ID.HasValue ?
                new ObjectParameter("p_CUSTOMER_PROJECT_ID", p_CUSTOMER_PROJECT_ID) :
                new ObjectParameter("p_CUSTOMER_PROJECT_ID", typeof(int));
    
            var p_CUSTOMER_PROJECT_LANGParameter = p_CUSTOMER_PROJECT_LANG != null ?
                new ObjectParameter("p_CUSTOMER_PROJECT_LANG", p_CUSTOMER_PROJECT_LANG) :
                new ObjectParameter("p_CUSTOMER_PROJECT_LANG", typeof(string));
    
            var p_CUSTOMER_PROJECT_NAMEParameter = p_CUSTOMER_PROJECT_NAME != null ?
                new ObjectParameter("p_CUSTOMER_PROJECT_NAME", p_CUSTOMER_PROJECT_NAME) :
                new ObjectParameter("p_CUSTOMER_PROJECT_NAME", typeof(string));
    
            var p_CUSTOMER_PROJECT_ADDRParameter = p_CUSTOMER_PROJECT_ADDR != null ?
                new ObjectParameter("p_CUSTOMER_PROJECT_ADDR", p_CUSTOMER_PROJECT_ADDR) :
                new ObjectParameter("p_CUSTOMER_PROJECT_ADDR", typeof(string));
    
            var p_MEASURED_DATEParameter = p_MEASURED_DATE.HasValue ?
                new ObjectParameter("p_MEASURED_DATE", p_MEASURED_DATE) :
                new ObjectParameter("p_MEASURED_DATE", typeof(System.DateTime));
    
            var p_MEASURED_DATE_TOParameter = p_MEASURED_DATE_TO.HasValue ?
                new ObjectParameter("p_MEASURED_DATE_TO", p_MEASURED_DATE_TO) :
                new ObjectParameter("p_MEASURED_DATE_TO", typeof(System.DateTime));
    
            var p_MEASURED_TIME_FROMParameter = p_MEASURED_TIME_FROM.HasValue ?
                new ObjectParameter("p_MEASURED_TIME_FROM", p_MEASURED_TIME_FROM) :
                new ObjectParameter("p_MEASURED_TIME_FROM", typeof(System.TimeSpan));
    
            var p_MEASURED_TIME_TOParameter = p_MEASURED_TIME_TO.HasValue ?
                new ObjectParameter("p_MEASURED_TIME_TO", p_MEASURED_TIME_TO) :
                new ObjectParameter("p_MEASURED_TIME_TO", typeof(System.TimeSpan));
    
            var p_MEASURED_DATE_NIGHTParameter = p_MEASURED_DATE_NIGHT.HasValue ?
                new ObjectParameter("p_MEASURED_DATE_NIGHT", p_MEASURED_DATE_NIGHT) :
                new ObjectParameter("p_MEASURED_DATE_NIGHT", typeof(System.DateTime));
    
            var p_MEASURED_DATE_NIGHT_TOParameter = p_MEASURED_DATE_NIGHT_TO.HasValue ?
                new ObjectParameter("p_MEASURED_DATE_NIGHT_TO", p_MEASURED_DATE_NIGHT_TO) :
                new ObjectParameter("p_MEASURED_DATE_NIGHT_TO", typeof(System.DateTime));
    
            var p_MEASURED_TIME_FROM_NIGHTParameter = p_MEASURED_TIME_FROM_NIGHT.HasValue ?
                new ObjectParameter("p_MEASURED_TIME_FROM_NIGHT", p_MEASURED_TIME_FROM_NIGHT) :
                new ObjectParameter("p_MEASURED_TIME_FROM_NIGHT", typeof(System.TimeSpan));
    
            var p_MEASURED_TIME_TO_NIGHTParameter = p_MEASURED_TIME_TO_NIGHT.HasValue ?
                new ObjectParameter("p_MEASURED_TIME_TO_NIGHT", p_MEASURED_TIME_TO_NIGHT) :
                new ObjectParameter("p_MEASURED_TIME_TO_NIGHT", typeof(System.TimeSpan));
    
            var p_MEASURED_BYParameter = p_MEASURED_BY != null ?
                new ObjectParameter("p_MEASURED_BY", p_MEASURED_BY) :
                new ObjectParameter("p_MEASURED_BY", typeof(string));
    
            var p_MEASURED_INSTRUMENT_IDParameter = p_MEASURED_INSTRUMENT_ID.HasValue ?
                new ObjectParameter("p_MEASURED_INSTRUMENT_ID", p_MEASURED_INSTRUMENT_ID) :
                new ObjectParameter("p_MEASURED_INSTRUMENT_ID", typeof(int));
    
            var p_REGISTRATION_IDParameter = p_REGISTRATION_ID != null ?
                new ObjectParameter("p_REGISTRATION_ID", p_REGISTRATION_ID) :
                new ObjectParameter("p_REGISTRATION_ID", typeof(string));
    
            var p_LAB_SUPERVISOR_IDParameter = p_LAB_SUPERVISOR_ID != null ?
                new ObjectParameter("p_LAB_SUPERVISOR_ID", p_LAB_SUPERVISOR_ID) :
                new ObjectParameter("p_LAB_SUPERVISOR_ID", typeof(string));
    
            var p_SHOW_LV3_EACH_PAGEParameter = p_SHOW_LV3_EACH_PAGE.HasValue ?
                new ObjectParameter("p_SHOW_LV3_EACH_PAGE", p_SHOW_LV3_EACH_PAGE) :
                new ObjectParameter("p_SHOW_LV3_EACH_PAGE", typeof(bool));
    
            var p_SHOW_LV3_CONTParameter = p_SHOW_LV3_CONT.HasValue ?
                new ObjectParameter("p_SHOW_LV3_CONT", p_SHOW_LV3_CONT) :
                new ObjectParameter("p_SHOW_LV3_CONT", typeof(bool));
    
            var p_SHOW_LV2_CONTParameter = p_SHOW_LV2_CONT.HasValue ?
                new ObjectParameter("p_SHOW_LV2_CONT", p_SHOW_LV2_CONT) :
                new ObjectParameter("p_SHOW_LV2_CONT", typeof(bool));
    
            var p_SHOW_PROJECT_ADDRParameter = p_SHOW_PROJECT_ADDR.HasValue ?
                new ObjectParameter("p_SHOW_PROJECT_ADDR", p_SHOW_PROJECT_ADDR) :
                new ObjectParameter("p_SHOW_PROJECT_ADDR", typeof(bool));
    
            var p_USERIDParameter = p_USERID != null ?
                new ObjectParameter("p_USERID", p_USERID) :
                new ObjectParameter("p_USERID", typeof(string));
    
            var p_IS_CANCELParameter = p_IS_CANCEL.HasValue ?
                new ObjectParameter("p_IS_CANCEL", p_IS_CANCEL) :
                new ObjectParameter("p_IS_CANCEL", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_RPT001_SaveWorkPlaceLight", p_IDParameter, p_REPORT_CODEParameter, p_CUSTOMER_IDParameter, p_CUSTOMER_LANGParameter, p_CUSTOMER_NAMEParameter, p_CUSTOMER_ADDRParameter, p_CUSTOMER_PROJECT_IDParameter, p_CUSTOMER_PROJECT_LANGParameter, p_CUSTOMER_PROJECT_NAMEParameter, p_CUSTOMER_PROJECT_ADDRParameter, p_MEASURED_DATEParameter, p_MEASURED_DATE_TOParameter, p_MEASURED_TIME_FROMParameter, p_MEASURED_TIME_TOParameter, p_MEASURED_DATE_NIGHTParameter, p_MEASURED_DATE_NIGHT_TOParameter, p_MEASURED_TIME_FROM_NIGHTParameter, p_MEASURED_TIME_TO_NIGHTParameter, p_MEASURED_BYParameter, p_MEASURED_INSTRUMENT_IDParameter, p_REGISTRATION_IDParameter, p_LAB_SUPERVISOR_IDParameter, p_SHOW_LV3_EACH_PAGEParameter, p_SHOW_LV3_CONTParameter, p_SHOW_LV2_CONTParameter, p_SHOW_PROJECT_ADDRParameter, p_USERIDParameter, p_IS_CANCELParameter);
        }
    
        public virtual int sp_RPT001_SaveWorkPlaceLightDt(Nullable<int> p_ID, Nullable<int> p_WPL_ID, Nullable<int> p_SEQ, string p_LOC_NAME, string p_LOC_NAME_LV2, string p_LOC_NAME_LV3, Nullable<int> p_STDLIGHT_ID, string p_STDLIGHT_NAME, Nullable<int> p_STDLIGHT_STANDARD, Nullable<int> p_RESULT_DAY, Nullable<int> p_RESULT_NIGHT, string p_CONDITION, string p_USERID, Nullable<bool> p_IS_CANCEL)
        {
            var p_IDParameter = p_ID.HasValue ?
                new ObjectParameter("p_ID", p_ID) :
                new ObjectParameter("p_ID", typeof(int));
    
            var p_WPL_IDParameter = p_WPL_ID.HasValue ?
                new ObjectParameter("p_WPL_ID", p_WPL_ID) :
                new ObjectParameter("p_WPL_ID", typeof(int));
    
            var p_SEQParameter = p_SEQ.HasValue ?
                new ObjectParameter("p_SEQ", p_SEQ) :
                new ObjectParameter("p_SEQ", typeof(int));
    
            var p_LOC_NAMEParameter = p_LOC_NAME != null ?
                new ObjectParameter("p_LOC_NAME", p_LOC_NAME) :
                new ObjectParameter("p_LOC_NAME", typeof(string));
    
            var p_LOC_NAME_LV2Parameter = p_LOC_NAME_LV2 != null ?
                new ObjectParameter("p_LOC_NAME_LV2", p_LOC_NAME_LV2) :
                new ObjectParameter("p_LOC_NAME_LV2", typeof(string));
    
            var p_LOC_NAME_LV3Parameter = p_LOC_NAME_LV3 != null ?
                new ObjectParameter("p_LOC_NAME_LV3", p_LOC_NAME_LV3) :
                new ObjectParameter("p_LOC_NAME_LV3", typeof(string));
    
            var p_STDLIGHT_IDParameter = p_STDLIGHT_ID.HasValue ?
                new ObjectParameter("p_STDLIGHT_ID", p_STDLIGHT_ID) :
                new ObjectParameter("p_STDLIGHT_ID", typeof(int));
    
            var p_STDLIGHT_NAMEParameter = p_STDLIGHT_NAME != null ?
                new ObjectParameter("p_STDLIGHT_NAME", p_STDLIGHT_NAME) :
                new ObjectParameter("p_STDLIGHT_NAME", typeof(string));
    
            var p_STDLIGHT_STANDARDParameter = p_STDLIGHT_STANDARD.HasValue ?
                new ObjectParameter("p_STDLIGHT_STANDARD", p_STDLIGHT_STANDARD) :
                new ObjectParameter("p_STDLIGHT_STANDARD", typeof(int));
    
            var p_RESULT_DAYParameter = p_RESULT_DAY.HasValue ?
                new ObjectParameter("p_RESULT_DAY", p_RESULT_DAY) :
                new ObjectParameter("p_RESULT_DAY", typeof(int));
    
            var p_RESULT_NIGHTParameter = p_RESULT_NIGHT.HasValue ?
                new ObjectParameter("p_RESULT_NIGHT", p_RESULT_NIGHT) :
                new ObjectParameter("p_RESULT_NIGHT", typeof(int));
    
            var p_CONDITIONParameter = p_CONDITION != null ?
                new ObjectParameter("p_CONDITION", p_CONDITION) :
                new ObjectParameter("p_CONDITION", typeof(string));
    
            var p_USERIDParameter = p_USERID != null ?
                new ObjectParameter("p_USERID", p_USERID) :
                new ObjectParameter("p_USERID", typeof(string));
    
            var p_IS_CANCELParameter = p_IS_CANCEL.HasValue ?
                new ObjectParameter("p_IS_CANCEL", p_IS_CANCEL) :
                new ObjectParameter("p_IS_CANCEL", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RPT001_SaveWorkPlaceLightDt", p_IDParameter, p_WPL_IDParameter, p_SEQParameter, p_LOC_NAMEParameter, p_LOC_NAME_LV2Parameter, p_LOC_NAME_LV3Parameter, p_STDLIGHT_IDParameter, p_STDLIGHT_NAMEParameter, p_STDLIGHT_STANDARDParameter, p_RESULT_DAYParameter, p_RESULT_NIGHTParameter, p_CONDITIONParameter, p_USERIDParameter, p_IS_CANCELParameter);
        }
    
        public virtual ObjectResult<sp_RPT001_GetWorkPlaceLightReport_Result> sp_RPT001_GetWorkPlaceLightReport(Nullable<int> p_ID)
        {
            var p_IDParameter = p_ID.HasValue ?
                new ObjectParameter("p_ID", p_ID) :
                new ObjectParameter("p_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RPT001_GetWorkPlaceLightReport_Result>("sp_RPT001_GetWorkPlaceLightReport", p_IDParameter);
        }
    
        public virtual ObjectResult<sp_RPT002_GetWorkPlaceAir_Result> sp_RPT002_GetWorkPlaceAir(Nullable<int> p_ID, string p_ANALYSIS_NO, string p_JOB_NO, Nullable<int> p_CUSTOMER_ID, Nullable<System.DateTime> p_ANALYTICAL_DATE_FROM, Nullable<System.DateTime> p_ANALYTICAL_DATE_TO, Nullable<System.DateTime> p_SAMPLING_DATE_FROM, Nullable<System.DateTime> p_SAMPLING_DATE_TO, string p_SAMPLING_BY, Nullable<bool> p_SHOWDELETERECORD)
        {
            var p_IDParameter = p_ID.HasValue ?
                new ObjectParameter("p_ID", p_ID) :
                new ObjectParameter("p_ID", typeof(int));
    
            var p_ANALYSIS_NOParameter = p_ANALYSIS_NO != null ?
                new ObjectParameter("p_ANALYSIS_NO", p_ANALYSIS_NO) :
                new ObjectParameter("p_ANALYSIS_NO", typeof(string));
    
            var p_JOB_NOParameter = p_JOB_NO != null ?
                new ObjectParameter("p_JOB_NO", p_JOB_NO) :
                new ObjectParameter("p_JOB_NO", typeof(string));
    
            var p_CUSTOMER_IDParameter = p_CUSTOMER_ID.HasValue ?
                new ObjectParameter("p_CUSTOMER_ID", p_CUSTOMER_ID) :
                new ObjectParameter("p_CUSTOMER_ID", typeof(int));
    
            var p_ANALYTICAL_DATE_FROMParameter = p_ANALYTICAL_DATE_FROM.HasValue ?
                new ObjectParameter("p_ANALYTICAL_DATE_FROM", p_ANALYTICAL_DATE_FROM) :
                new ObjectParameter("p_ANALYTICAL_DATE_FROM", typeof(System.DateTime));
    
            var p_ANALYTICAL_DATE_TOParameter = p_ANALYTICAL_DATE_TO.HasValue ?
                new ObjectParameter("p_ANALYTICAL_DATE_TO", p_ANALYTICAL_DATE_TO) :
                new ObjectParameter("p_ANALYTICAL_DATE_TO", typeof(System.DateTime));
    
            var p_SAMPLING_DATE_FROMParameter = p_SAMPLING_DATE_FROM.HasValue ?
                new ObjectParameter("p_SAMPLING_DATE_FROM", p_SAMPLING_DATE_FROM) :
                new ObjectParameter("p_SAMPLING_DATE_FROM", typeof(System.DateTime));
    
            var p_SAMPLING_DATE_TOParameter = p_SAMPLING_DATE_TO.HasValue ?
                new ObjectParameter("p_SAMPLING_DATE_TO", p_SAMPLING_DATE_TO) :
                new ObjectParameter("p_SAMPLING_DATE_TO", typeof(System.DateTime));
    
            var p_SAMPLING_BYParameter = p_SAMPLING_BY != null ?
                new ObjectParameter("p_SAMPLING_BY", p_SAMPLING_BY) :
                new ObjectParameter("p_SAMPLING_BY", typeof(string));
    
            var p_SHOWDELETERECORDParameter = p_SHOWDELETERECORD.HasValue ?
                new ObjectParameter("p_SHOWDELETERECORD", p_SHOWDELETERECORD) :
                new ObjectParameter("p_SHOWDELETERECORD", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RPT002_GetWorkPlaceAir_Result>("sp_RPT002_GetWorkPlaceAir", p_IDParameter, p_ANALYSIS_NOParameter, p_JOB_NOParameter, p_CUSTOMER_IDParameter, p_ANALYTICAL_DATE_FROMParameter, p_ANALYTICAL_DATE_TOParameter, p_SAMPLING_DATE_FROMParameter, p_SAMPLING_DATE_TOParameter, p_SAMPLING_BYParameter, p_SHOWDELETERECORDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_RPT002_SaveWorkPlaceAir(Nullable<int> p_ID, Nullable<System.DateTime> p_REPORT_DATE, string p_REPORT_TYPE, string p_ANALYSYS_NO, Nullable<int> p_CUSTOMER_ID, string p_CUSTOMER_ADDR, Nullable<int> p_CUSTOMER_PROJECT_ID, string p_CUSTOMER_PROJECT_ADDR, Nullable<System.DateTime> p_RECEIVED_DATE, Nullable<System.DateTime> p_ANALYTICAL_DATE_FROM, Nullable<System.DateTime> p_ANALYTICAL_DATE_TO, string p_ANALYSIS_ID, string p_JOB_NO, string p_SAMPLING_BY, string p_REGISTRATION_ID, string p_LAB_SUPERVISOR_ID, Nullable<bool> p_AGENT_FLAG, string p_AGENT_NAME, Nullable<bool> p_SHOW_LV3_EACH_PAGE, Nullable<bool> p_SHOW_LV3_CONT, Nullable<bool> p_SHOW_LV2_CONT, Nullable<bool> p_SHOW_PROJECT_ADDR, string p_USERID, Nullable<bool> p_IS_CANCEL)
        {
            var p_IDParameter = p_ID.HasValue ?
                new ObjectParameter("p_ID", p_ID) :
                new ObjectParameter("p_ID", typeof(int));
    
            var p_REPORT_DATEParameter = p_REPORT_DATE.HasValue ?
                new ObjectParameter("p_REPORT_DATE", p_REPORT_DATE) :
                new ObjectParameter("p_REPORT_DATE", typeof(System.DateTime));
    
            var p_REPORT_TYPEParameter = p_REPORT_TYPE != null ?
                new ObjectParameter("p_REPORT_TYPE", p_REPORT_TYPE) :
                new ObjectParameter("p_REPORT_TYPE", typeof(string));
    
            var p_ANALYSYS_NOParameter = p_ANALYSYS_NO != null ?
                new ObjectParameter("p_ANALYSYS_NO", p_ANALYSYS_NO) :
                new ObjectParameter("p_ANALYSYS_NO", typeof(string));
    
            var p_CUSTOMER_IDParameter = p_CUSTOMER_ID.HasValue ?
                new ObjectParameter("p_CUSTOMER_ID", p_CUSTOMER_ID) :
                new ObjectParameter("p_CUSTOMER_ID", typeof(int));
    
            var p_CUSTOMER_ADDRParameter = p_CUSTOMER_ADDR != null ?
                new ObjectParameter("p_CUSTOMER_ADDR", p_CUSTOMER_ADDR) :
                new ObjectParameter("p_CUSTOMER_ADDR", typeof(string));
    
            var p_CUSTOMER_PROJECT_IDParameter = p_CUSTOMER_PROJECT_ID.HasValue ?
                new ObjectParameter("p_CUSTOMER_PROJECT_ID", p_CUSTOMER_PROJECT_ID) :
                new ObjectParameter("p_CUSTOMER_PROJECT_ID", typeof(int));
    
            var p_CUSTOMER_PROJECT_ADDRParameter = p_CUSTOMER_PROJECT_ADDR != null ?
                new ObjectParameter("p_CUSTOMER_PROJECT_ADDR", p_CUSTOMER_PROJECT_ADDR) :
                new ObjectParameter("p_CUSTOMER_PROJECT_ADDR", typeof(string));
    
            var p_RECEIVED_DATEParameter = p_RECEIVED_DATE.HasValue ?
                new ObjectParameter("p_RECEIVED_DATE", p_RECEIVED_DATE) :
                new ObjectParameter("p_RECEIVED_DATE", typeof(System.DateTime));
    
            var p_ANALYTICAL_DATE_FROMParameter = p_ANALYTICAL_DATE_FROM.HasValue ?
                new ObjectParameter("p_ANALYTICAL_DATE_FROM", p_ANALYTICAL_DATE_FROM) :
                new ObjectParameter("p_ANALYTICAL_DATE_FROM", typeof(System.DateTime));
    
            var p_ANALYTICAL_DATE_TOParameter = p_ANALYTICAL_DATE_TO.HasValue ?
                new ObjectParameter("p_ANALYTICAL_DATE_TO", p_ANALYTICAL_DATE_TO) :
                new ObjectParameter("p_ANALYTICAL_DATE_TO", typeof(System.DateTime));
    
            var p_ANALYSIS_IDParameter = p_ANALYSIS_ID != null ?
                new ObjectParameter("p_ANALYSIS_ID", p_ANALYSIS_ID) :
                new ObjectParameter("p_ANALYSIS_ID", typeof(string));
    
            var p_JOB_NOParameter = p_JOB_NO != null ?
                new ObjectParameter("p_JOB_NO", p_JOB_NO) :
                new ObjectParameter("p_JOB_NO", typeof(string));
    
            var p_SAMPLING_BYParameter = p_SAMPLING_BY != null ?
                new ObjectParameter("p_SAMPLING_BY", p_SAMPLING_BY) :
                new ObjectParameter("p_SAMPLING_BY", typeof(string));
    
            var p_REGISTRATION_IDParameter = p_REGISTRATION_ID != null ?
                new ObjectParameter("p_REGISTRATION_ID", p_REGISTRATION_ID) :
                new ObjectParameter("p_REGISTRATION_ID", typeof(string));
    
            var p_LAB_SUPERVISOR_IDParameter = p_LAB_SUPERVISOR_ID != null ?
                new ObjectParameter("p_LAB_SUPERVISOR_ID", p_LAB_SUPERVISOR_ID) :
                new ObjectParameter("p_LAB_SUPERVISOR_ID", typeof(string));
    
            var p_AGENT_FLAGParameter = p_AGENT_FLAG.HasValue ?
                new ObjectParameter("p_AGENT_FLAG", p_AGENT_FLAG) :
                new ObjectParameter("p_AGENT_FLAG", typeof(bool));
    
            var p_AGENT_NAMEParameter = p_AGENT_NAME != null ?
                new ObjectParameter("p_AGENT_NAME", p_AGENT_NAME) :
                new ObjectParameter("p_AGENT_NAME", typeof(string));
    
            var p_SHOW_LV3_EACH_PAGEParameter = p_SHOW_LV3_EACH_PAGE.HasValue ?
                new ObjectParameter("p_SHOW_LV3_EACH_PAGE", p_SHOW_LV3_EACH_PAGE) :
                new ObjectParameter("p_SHOW_LV3_EACH_PAGE", typeof(bool));
    
            var p_SHOW_LV3_CONTParameter = p_SHOW_LV3_CONT.HasValue ?
                new ObjectParameter("p_SHOW_LV3_CONT", p_SHOW_LV3_CONT) :
                new ObjectParameter("p_SHOW_LV3_CONT", typeof(bool));
    
            var p_SHOW_LV2_CONTParameter = p_SHOW_LV2_CONT.HasValue ?
                new ObjectParameter("p_SHOW_LV2_CONT", p_SHOW_LV2_CONT) :
                new ObjectParameter("p_SHOW_LV2_CONT", typeof(bool));
    
            var p_SHOW_PROJECT_ADDRParameter = p_SHOW_PROJECT_ADDR.HasValue ?
                new ObjectParameter("p_SHOW_PROJECT_ADDR", p_SHOW_PROJECT_ADDR) :
                new ObjectParameter("p_SHOW_PROJECT_ADDR", typeof(bool));
    
            var p_USERIDParameter = p_USERID != null ?
                new ObjectParameter("p_USERID", p_USERID) :
                new ObjectParameter("p_USERID", typeof(string));
    
            var p_IS_CANCELParameter = p_IS_CANCEL.HasValue ?
                new ObjectParameter("p_IS_CANCEL", p_IS_CANCEL) :
                new ObjectParameter("p_IS_CANCEL", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_RPT002_SaveWorkPlaceAir", p_IDParameter, p_REPORT_DATEParameter, p_REPORT_TYPEParameter, p_ANALYSYS_NOParameter, p_CUSTOMER_IDParameter, p_CUSTOMER_ADDRParameter, p_CUSTOMER_PROJECT_IDParameter, p_CUSTOMER_PROJECT_ADDRParameter, p_RECEIVED_DATEParameter, p_ANALYTICAL_DATE_FROMParameter, p_ANALYTICAL_DATE_TOParameter, p_ANALYSIS_IDParameter, p_JOB_NOParameter, p_SAMPLING_BYParameter, p_REGISTRATION_IDParameter, p_LAB_SUPERVISOR_IDParameter, p_AGENT_FLAGParameter, p_AGENT_NAMEParameter, p_SHOW_LV3_EACH_PAGEParameter, p_SHOW_LV3_CONTParameter, p_SHOW_LV2_CONTParameter, p_SHOW_PROJECT_ADDRParameter, p_USERIDParameter, p_IS_CANCELParameter);
        }
    
        public virtual int sp_RPT002_SaveWorkPlaceAirDt(Nullable<int> p_ID, Nullable<int> p_WPA_ID, Nullable<int> p_SEQ, string p_LOC_NAME, string p_LOC_NAME_LV2, string p_LOC_NAME_LV3, Nullable<System.DateTime> p_SAMPLING_DATE, Nullable<int> p_PARAMETER_ID, Nullable<System.TimeSpan> p_SAMPLING_TIME, Nullable<decimal> p_AIR_FLOW, Nullable<decimal> p_SAMPLING_MINS, Nullable<decimal> p_AIR_VOLUME, Nullable<decimal> p_RESULT_VALUE, Nullable<bool> p_LESS_RESULT_VALUE, Nullable<int> p_UNIT_ID, Nullable<decimal> p_STANDARD_THAI, Nullable<decimal> p_STANDARD_ACGIH, Nullable<bool> p_CEILING_LIMIT, Nullable<bool> p_WAIT_RESULT, string p_REMARK, string p_USERID, Nullable<bool> p_IS_CANCEL)
        {
            var p_IDParameter = p_ID.HasValue ?
                new ObjectParameter("p_ID", p_ID) :
                new ObjectParameter("p_ID", typeof(int));
    
            var p_WPA_IDParameter = p_WPA_ID.HasValue ?
                new ObjectParameter("p_WPA_ID", p_WPA_ID) :
                new ObjectParameter("p_WPA_ID", typeof(int));
    
            var p_SEQParameter = p_SEQ.HasValue ?
                new ObjectParameter("p_SEQ", p_SEQ) :
                new ObjectParameter("p_SEQ", typeof(int));
    
            var p_LOC_NAMEParameter = p_LOC_NAME != null ?
                new ObjectParameter("p_LOC_NAME", p_LOC_NAME) :
                new ObjectParameter("p_LOC_NAME", typeof(string));
    
            var p_LOC_NAME_LV2Parameter = p_LOC_NAME_LV2 != null ?
                new ObjectParameter("p_LOC_NAME_LV2", p_LOC_NAME_LV2) :
                new ObjectParameter("p_LOC_NAME_LV2", typeof(string));
    
            var p_LOC_NAME_LV3Parameter = p_LOC_NAME_LV3 != null ?
                new ObjectParameter("p_LOC_NAME_LV3", p_LOC_NAME_LV3) :
                new ObjectParameter("p_LOC_NAME_LV3", typeof(string));
    
            var p_SAMPLING_DATEParameter = p_SAMPLING_DATE.HasValue ?
                new ObjectParameter("p_SAMPLING_DATE", p_SAMPLING_DATE) :
                new ObjectParameter("p_SAMPLING_DATE", typeof(System.DateTime));
    
            var p_PARAMETER_IDParameter = p_PARAMETER_ID.HasValue ?
                new ObjectParameter("p_PARAMETER_ID", p_PARAMETER_ID) :
                new ObjectParameter("p_PARAMETER_ID", typeof(int));
    
            var p_SAMPLING_TIMEParameter = p_SAMPLING_TIME.HasValue ?
                new ObjectParameter("p_SAMPLING_TIME", p_SAMPLING_TIME) :
                new ObjectParameter("p_SAMPLING_TIME", typeof(System.TimeSpan));
    
            var p_AIR_FLOWParameter = p_AIR_FLOW.HasValue ?
                new ObjectParameter("p_AIR_FLOW", p_AIR_FLOW) :
                new ObjectParameter("p_AIR_FLOW", typeof(decimal));
    
            var p_SAMPLING_MINSParameter = p_SAMPLING_MINS.HasValue ?
                new ObjectParameter("p_SAMPLING_MINS", p_SAMPLING_MINS) :
                new ObjectParameter("p_SAMPLING_MINS", typeof(decimal));
    
            var p_AIR_VOLUMEParameter = p_AIR_VOLUME.HasValue ?
                new ObjectParameter("p_AIR_VOLUME", p_AIR_VOLUME) :
                new ObjectParameter("p_AIR_VOLUME", typeof(decimal));
    
            var p_RESULT_VALUEParameter = p_RESULT_VALUE.HasValue ?
                new ObjectParameter("p_RESULT_VALUE", p_RESULT_VALUE) :
                new ObjectParameter("p_RESULT_VALUE", typeof(decimal));
    
            var p_LESS_RESULT_VALUEParameter = p_LESS_RESULT_VALUE.HasValue ?
                new ObjectParameter("p_LESS_RESULT_VALUE", p_LESS_RESULT_VALUE) :
                new ObjectParameter("p_LESS_RESULT_VALUE", typeof(bool));
    
            var p_UNIT_IDParameter = p_UNIT_ID.HasValue ?
                new ObjectParameter("p_UNIT_ID", p_UNIT_ID) :
                new ObjectParameter("p_UNIT_ID", typeof(int));
    
            var p_STANDARD_THAIParameter = p_STANDARD_THAI.HasValue ?
                new ObjectParameter("p_STANDARD_THAI", p_STANDARD_THAI) :
                new ObjectParameter("p_STANDARD_THAI", typeof(decimal));
    
            var p_STANDARD_ACGIHParameter = p_STANDARD_ACGIH.HasValue ?
                new ObjectParameter("p_STANDARD_ACGIH", p_STANDARD_ACGIH) :
                new ObjectParameter("p_STANDARD_ACGIH", typeof(decimal));
    
            var p_CEILING_LIMITParameter = p_CEILING_LIMIT.HasValue ?
                new ObjectParameter("p_CEILING_LIMIT", p_CEILING_LIMIT) :
                new ObjectParameter("p_CEILING_LIMIT", typeof(bool));
    
            var p_WAIT_RESULTParameter = p_WAIT_RESULT.HasValue ?
                new ObjectParameter("p_WAIT_RESULT", p_WAIT_RESULT) :
                new ObjectParameter("p_WAIT_RESULT", typeof(bool));
    
            var p_REMARKParameter = p_REMARK != null ?
                new ObjectParameter("p_REMARK", p_REMARK) :
                new ObjectParameter("p_REMARK", typeof(string));
    
            var p_USERIDParameter = p_USERID != null ?
                new ObjectParameter("p_USERID", p_USERID) :
                new ObjectParameter("p_USERID", typeof(string));
    
            var p_IS_CANCELParameter = p_IS_CANCEL.HasValue ?
                new ObjectParameter("p_IS_CANCEL", p_IS_CANCEL) :
                new ObjectParameter("p_IS_CANCEL", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RPT002_SaveWorkPlaceAirDt", p_IDParameter, p_WPA_IDParameter, p_SEQParameter, p_LOC_NAMEParameter, p_LOC_NAME_LV2Parameter, p_LOC_NAME_LV3Parameter, p_SAMPLING_DATEParameter, p_PARAMETER_IDParameter, p_SAMPLING_TIMEParameter, p_AIR_FLOWParameter, p_SAMPLING_MINSParameter, p_AIR_VOLUMEParameter, p_RESULT_VALUEParameter, p_LESS_RESULT_VALUEParameter, p_UNIT_IDParameter, p_STANDARD_THAIParameter, p_STANDARD_ACGIHParameter, p_CEILING_LIMITParameter, p_WAIT_RESULTParameter, p_REMARKParameter, p_USERIDParameter, p_IS_CANCELParameter);
        }
    
        public virtual ObjectResult<sp_RPT002_GetWorkPlaceAirDt_Result> sp_RPT002_GetWorkPlaceAirDt(Nullable<int> p_WPL_ID)
        {
            var p_WPL_IDParameter = p_WPL_ID.HasValue ?
                new ObjectParameter("p_WPL_ID", p_WPL_ID) :
                new ObjectParameter("p_WPL_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RPT002_GetWorkPlaceAirDt_Result>("sp_RPT002_GetWorkPlaceAirDt", p_WPL_IDParameter);
        }
    
        public virtual ObjectResult<sp_RPT002_GetWorkPlaceAirReport_2_Result> sp_RPT002_GetWorkPlaceAirReport_2(Nullable<int> p_ID)
        {
            var p_IDParameter = p_ID.HasValue ?
                new ObjectParameter("p_ID", p_ID) :
                new ObjectParameter("p_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RPT002_GetWorkPlaceAirReport_2_Result>("sp_RPT002_GetWorkPlaceAirReport_2", p_IDParameter);
        }
    }
}
